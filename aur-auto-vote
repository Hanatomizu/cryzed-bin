#!/usr/bin/env python

import argparse
import collections
import os
import re
import subprocess
import time

import bs4
import requests

EXIT_FAILURE = 1
LOGIN_URL = 'https://aur.archlinux.org/login'
SEARCH_URL_TEMPLATE = 'https://aur.archlinux.org/packages/?O=%d&SB=w&SO=d&PP=250&do_Search=Go'
PACKAGES_URL = 'https://aur.archlinux.org/packages/'
VOTE_URL_TEMPLATE = 'https://aur.archlinux.org/pkgbase/%s/vote/'
UNVOTE_URL_TEMPLATE = 'https://aur.archlinux.org/pkgbase/%s/unvote/'
PACKAGES_PER_PAGE = 250

argument_parser = argparse.ArgumentParser()
argument_parser.add_argument('username')
argument_parser.add_argument('--ignore', '-i', action='append', default=[],
                             help='Regex for packages that should not be voted. Can be passed multiple times.')
argument_parser.add_argument('--unvote-all', '-u', action='store_true',
                             help='Unvote all voted-for packages, all other arguments are ignored.')
argument_parser.add_argument('--delay', '-d', type=float, default=0, help='Delay between voting actions (seconds).')

Package = collections.namedtuple(
    'Package', ('name', 'version', 'votes', 'popularity', 'voted', 'notify', 'description', 'maintainer'))


def login(session, username, password):
    response = session.post(LOGIN_URL, {'user': username, 'passwd': password})
    soup = bs4.BeautifulSoup(response.text, 'html5lib')
    return bool(soup.select_one('#archdev-navbar').find('a', href=lambda h: h and h.rstrip('/').endswith('/logout')))


def get_foreign_packages():
    return subprocess.check_output(('pacman', '-Qmq'), universal_newlines=True).splitlines()


def get_voted_packages(session):
    offset = 0

    while True:
        response = session.get(SEARCH_URL_TEMPLATE % offset)
        soup = bs4.BeautifulSoup(response.text, 'html5lib')
        for row in soup.select('.results > tbody > tr'):
            package = Package(*(c.get_text(strip=True) for c in row.select('> td')[1:]))
            if not package.voted:
                return

            yield package

        offset += PACKAGES_PER_PAGE


def get_token(session):
    response = session.get(PACKAGES_URL)
    soup = bs4.BeautifulSoup(response.text, 'html5lib')
    return soup.select_one('input[name=token]')['value']


def vote_package(session, token, package):
    response = session.post(VOTE_URL_TEMPLATE % package, {'token': token, 'do_Vote': 'Vote for this package'},
                            allow_redirects=False)
    return response.status_code == requests.codes.found


def unvote_package(session, token, package):
    response = session.post(UNVOTE_URL_TEMPLATE % package, {'token': token, 'do_UnVote': 'Remove vote'},
                            allow_redirects=False)
    return response.status_code == requests.codes.found


def main(arguments):
    password = os.environ.get('AUR_AUTO_VOTE_PASSWORD') or input('Password: ')
    ignores = tuple(re.compile(r) for r in arguments.ignore)
    session = requests.Session()
    if not login(session, arguments.username, password):
        argument_parser.exit(EXIT_FAILURE, 'Could not login.\n')

    token = get_token(session)
    voted_packages = tuple(p.name for p in sorted(get_voted_packages(session)))

    # Unvote all packages and return immediately if --unvote-all was passed
    if arguments.unvote_all:
        for package in voted_packages:
            print('Unvoting package: %s... ' % package, end='', flush=True)
            print('done.') if unvote_package(session, token, package) else print('failed.')
            time.sleep(arguments.delay)
        return

    foreign_packages = set(get_foreign_packages())
    for package in sorted(foreign_packages.difference(set(voted_packages))):
        if any(i.match(package) for i in ignores):
            print('Ignoring package:', package)
            continue

        print('Voting for package: %s... ' % package, end='', flush=True)
        print('done.') if vote_package(session, token, package) else print('failed.')
        time.sleep(arguments.delay)


if __name__ == '__main__':
    arguments = argument_parser.parse_args()
    main(arguments)
