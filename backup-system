#!/usr/bin/env python

import os
import pwd
import re
import sys
from datetime import datetime

from plumbum import local
from plumbum.cmd import pacman, awk, tar, lostfiles

BLACKLIST = (
    re.compile(re.escape('/etc/fonts')),
    re.compile(re.escape('/etc/gconf')),
    re.compile(re.escape('/etc/gtk-2.0')),
    re.compile(re.escape('/opt')),
    re.compile(re.escape('/usr'))
)

OUTPUT_FILE_NAME = 'backup-%s-%s.tar.gz' % (os.uname().nodename, datetime.now().strftime('%Y-%d-%m_%H-%M'))
PACMAN_EXPLICITLY_INSTALLED_PACKAGES_FILE_NAME = 'pacman-explicitly-installed-packages.txt'
SYSTEMD_OCTOR_FILE_NAME = 'systemd-unit-files.json'


def get_all_file_paths(path):
    for root, dirs, files in os.walk(path):
        for file in files:
            yield os.path.join(root, file)


def get_explicitly_installed_packages():
    return pacman('-Q', '--explicit')


def get_modified_backup_files_paths():
    # https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks#Listing_changed_backup_files
    return [l for l in (pacman['-Qii'] | awk['/^MODIFIED/ {print $2}'])().splitlines() if l.strip()]


def get_lost_files_paths():
    # https://aur.archlinux.org/packages/lostfiles/
    return [l for l in lostfiles('strict').splitlines() if l.strip()]


def get_systemd_overrides():
    paths = []
    for target in '/etc/systemd/system', '/etc/systemd/user':
        for item in (i for i in os.listdir(target) if i.endswith('.d')):
            paths.extend(get_all_file_paths(os.path.join(target, item)))

    return paths


def blacklisted(path):
    return any(entry.match(path) for entry in BLACKLIST)


def main(destination=os.getcwd()):
    uid = os.getuid()
    if not uid == 0:
        print('This script must be run as root!', file=sys.stderr)
        return 1
    root = pwd.getpwuid(uid)

    # Write list of explicitly installed packages
    path = os.path.join(root.pw_dir, PACMAN_EXPLICITLY_INSTALLED_PACKAGES_FILE_NAME)
    with open(path, 'w') as file:
        file.write(get_explicitly_installed_packages())
    remove = [path]

    # Write systemd-octor systemd configuration json
    path = os.path.join(root.pw_dir, SYSTEMD_OCTOR_FILE_NAME)
    local['systemd-octor']('--destination', path)
    remove.append(path)

    backup_paths = list(p for p in get_modified_backup_files_paths() if os.path.isfile(p) and not blacklisted(p))
    backup_paths.extend(p for p in get_lost_files_paths() if os.path.isfile(p) and not blacklisted(p))
    backup_paths.extend(p for p in get_systemd_overrides() if not blacklisted(p))
    backup_paths.append(root.pw_dir)

    # TODO: Find all interative users and use pw_dirs explicitly?
    backup_paths.append('/home')

    output_path = os.path.join(destination, OUTPUT_FILE_NAME)
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    tar('--create', '--auto-compress', '--directory', '/', '--file', output_path, *backup_paths, retcode=(0, 1))

    for path in remove:
        os.remove(path)


if __name__ == '__main__':
    main(sys.argv[1]) if len(sys.argv) > 1 else main()
