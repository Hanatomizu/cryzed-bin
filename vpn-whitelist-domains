#!/usr/bin/env python

import os
import socket
import sys

from plumbum import cli
from plumbum.cmd import ip, sudo


def get_default_gateway():
    for line in ip('route').splitlines():
        # Return first default gateway found that isn't a virtual tunnel device
        if line.startswith('default via') and 'dev tun' not in line:
            return line.split('default via')[1].split(None, 1)[0]


def get_line_set(file):
    domains = set()
    for line in file:
        line = line.strip()
        if line and not line.startswith('#'):
            domains.add(line)
    return domains


class Application(cli.Application):
    remove = cli.Flag(['-r', '--remove'], help='Remove domain from whitelist')
    paths = cli.SwitchAttr(['--file', '-f'], list=True, help='Path to file containing domains')
    gateway = cli.SwitchAttr(['-g', '--gateway'], help=('Specify the gateway used to bypass the VPN. If not set, the '
                                                        'script will attempt to determine the default gateway'))

    def main(self, *domains):
        gateway = self.gateway or get_default_gateway()
        if not gateway:
            print('Error: Could not determine default gateway:', file=sys.stderr)
            print(ip('route'), file=sys.stderr)
            return 1

        domains = set(domains)
        for path in (os.path.expanduser(p) for p in self.paths):
            if os.path.exists(path):
                with open(path) as file:
                    domains = domains.union(get_line_set(file))

        for domain in domains:
            print('%s:' % domain)
            for address in set(i[4][0] for i in socket.getaddrinfo(domain, None)):
                if self.remove:
                    sudo(ip['route', 'del', address, 'via', gateway], retcode=None)
                    print('  Removed', address, 'from whitelist')
                else:
                    command = sudo[ip['route', 'add', address, 'via', gateway]]
                    exit_code, stdout, stderr = command.run(retcode=None)
                    if exit_code != 0:
                        print('  Failed to whitelist %s: %s' % (address, stderr.strip()), file=sys.stderr)
                        continue

                    print('  Added', address, 'to whitelist')
            print()


if __name__ == '__main__':
    Application.run()
