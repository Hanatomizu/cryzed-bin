#!/usr/bin/env python

import glob
import os
import socket
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta

import peewee
from plumbum import cli

MOZILLA_FIREFOX_PLACES_SQLITE_GLOB = '~/.mozilla/firefox/*.default/places.sqlite'
database = peewee.SqliteDatabase(None)


class Place(peewee.Model):
    url = peewee.TextField()
    rev_host = peewee.TextField()
    last_visit_date = peewee.IntegerField()

    class Meta:
        database = database
        db_table = 'moz_places'


def get_firefox_domains(days):
    candidates = glob.glob(os.path.expanduser(MOZILLA_FIREFOX_PLACES_SQLITE_GLOB))
    # Could not determine path to places.sqlite
    if not len(candidates) == 1:
        return

    database.init(candidates[0])
    query = Place.select().order_by(-Place.last_visit_date)

    # No history found
    latest = query.get()
    if not latest:
        return

    # Reduce timestamp precision so datetime can parse it
    last_visited_date = datetime.fromtimestamp(latest.last_visit_date / 1000000)
    min_date = last_visited_date - timedelta(days=days)

    domains = set()
    for place in query:
        last_visited_date = datetime.fromtimestamp(place.last_visit_date / 1000000)
        if last_visited_date < min_date:
            break

        if not place.url:
            continue

        # For some reason Mozilla seems to store the reversed domain, so use it instead of parsing it manually
        domains.add(place.rev_host[::-1][1:])
    return domains


def get_file_domains(file):
    domains = set()
    for line in file:
        line = line.strip()
        if line and not line.startswith('#'):
            domains.add(line)
    return domains


class Application(cli.Application):
    domains = cli.SwitchAttr(['--domain', '-d'], list=True)
    paths = cli.SwitchAttr(['--file', '-f'], list=True)

    use_firefox = cli.Flag(['--use-firefox'], default=False)
    days = cli.SwitchAttr(['--days', '-n'], argtype=int, default=7)

    def main(self):
        domains = set(self.domains)

        # Load all domains from path
        for path in (os.path.expanduser(p) for p in self.paths):
            if os.path.exists(path):
                with open(path) as file:
                    domains = domains.union(get_file_domains(file))

        if self.use_firefox:
            domains = domains.union(get_firefox_domains(self.days))

        print('Warming up DNS cache with %d domains...' % len(domains), end='', flush=True)
        executor = ThreadPoolExecutor()
        executor.map(socket.gethostbyname, domains)
        executor.shutdown()
        print(' done!')


if __name__ == '__main__':
    Application.run()
