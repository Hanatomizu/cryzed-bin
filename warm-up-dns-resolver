#!/usr/bin/env python

import argparse
import concurrent.futures
import glob
import os
import socket
from datetime import datetime, timedelta

import peewee

MOZILLA_FIREFOX_PLACES_SQLITE_GLOB = '~/.mozilla/firefox/*.default/places.sqlite'

argument_parser = argparse.ArgumentParser()
argument_parser.add_argument('domains', nargs='*')
argument_parser.add_argument('--file', dest='paths', metavar='PATH', nargs='+', default=[],
                             help='Paths to files containing domains.')
argument_parser.add_argument('--use-firefox', action='store_true', help="Use domains in Mozilla Firefox's history.")
argument_parser.add_argument('--days', type=int, default=7,
                             help='Use domains of history up to n days before the last made entry.')

# Initialize database later in get_firefox_domains
database = peewee.SqliteDatabase(None)


class FirefoxPlace(peewee.Model):
    url = peewee.TextField()
    rev_host = peewee.TextField()
    last_visit_date = peewee.IntegerField()

    class Meta:
        database = database
        db_table = 'moz_places'


def get_firefox_last_visited_domains(days):
    candidates = glob.glob(os.path.expanduser(MOZILLA_FIREFOX_PLACES_SQLITE_GLOB))
    domains = set()

    # Could not determine path to places.sqlite
    if not len(candidates) == 1:
        return domains

    database.init(candidates[0])
    query = FirefoxPlace.select().where(FirefoxPlace.last_visit_date).order_by(-FirefoxPlace.last_visit_date)

    # No history found
    latest = query.get()
    if not latest:
        return domains

    # Reduce timestamp precision so datetime can parse it
    last_visited_date = datetime.fromtimestamp(latest.last_visit_date / 1000000)
    min_date = last_visited_date - timedelta(days=days)

    for place in query:
        last_visited_date = datetime.fromtimestamp(place.last_visit_date / 1000000)
        if last_visited_date < min_date:
            break

        if not place.url:
            continue

        # For some reason Mozilla seems to store the reversed domain, so use it instead of parsing it manually
        domains.add(place.rev_host[::-1][1:])
    return domains


def get_line_set(file):
    lines = set()
    for line in file:
        line = line.strip()
        if line and not line.startswith('#'):
            lines.add(line)

    return lines


def main(arguments):
    domains = set(arguments.domains)

    # Load all domains from path
    for path in (os.path.expanduser(p) for p in arguments.paths):
        if os.path.exists(path):
            with open(path) as file:
                domains = domains.union(get_line_set(file))

    if arguments.use_firefox:
        domains = domains.union(get_firefox_last_visited_domains(arguments.days))

    print('Warming up DNS cache with %d domains...' % len(domains), end='', flush=True)
    executor = concurrent.futures.ThreadPoolExecutor()
    executor.map(socket.gethostbyname, domains)
    executor.shutdown()
    print(' done!')


if __name__ == '__main__':
    arguments = argument_parser.parse_args()
    main(arguments)
