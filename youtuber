#!/usr/bin/env python

import argparse
import itertools
import os
import shlex

import tqdm
import youtube_dl

argument_parser = argparse.ArgumentParser()
argument_parser.add_argument('path', default=os.getcwd())
argument_parser.add_argument('--dont-recurse', action='store_true')
arguments = argument_parser.parse_args()
youtube_dl_parser, youtube_dl_options, _ = youtube_dl.parseOpts([])
youtube_dl_options = vars(youtube_dl_options)

YOUTUBE_DL_EXTENSION = '.youtube-dl'
ENCODING = 'UTF-8'


class ErrorLogger:
    def __init__(self, print):
        self._print = print

    def debug(self, message):
        pass

    def warning(self, message):
        pass

    def error(self, message):
        self._print(message)


def find_paths(path, predicate=lambda path: True, recursive=True):
    paths = []
    for root, directories, file_names in os.walk(path):
        paths.extend(os.path.join(root, p) for p in itertools.chain(directories, file_names, (root,)) if predicate(p))
        if not recursive:
            break

    return paths


def find_youtube_dl_files_predicate(path):
    return os.path.splitext(path)[1] == YOUTUBE_DL_EXTENSION


def parse_youtube_dl_arguments(arguments):
    # Default argument parser options
    default_options, _ = youtube_dl_parser.parse_args([])
    default_options = vars(default_options)

    # Options for the current environment, including user- and system-configuration files
    options = youtube_dl_options.copy()

    # Update environment options with the new options
    new_options, urls = youtube_dl_parser.parse_args(arguments)
    options.update(vars(new_options))

    # Only return non-default options, i.e. options changed by the environment and the arguments
    none_sentinel = object()
    return {key: value for key, value in options.items() if value != default_options.get(key, none_sentinel)}, urls


def make_download_progress_hook():
    context = {}

    def download_progress_hook(data):
        if data['status'] == 'finished':
            return

        path = data['filename']
        progress_bar = context.get(path, None)
        if not progress_bar:
            # Current download changed, close old progressbar and remove reference
            for progress_bar in context.values():
                progress_bar.close()
            context.clear()

            # Create new progressbar
            progress_bar = tqdm.tqdm(total=data['total_bytes'], initial=data['downloaded_bytes'], unit_scale=True,
                                     unit='B', desc=os.path.basename(data['filename']), dynamic_ncols=True)
            context[path] = progress_bar
            return

        progress_bar.update(data['downloaded_bytes'] - progress_bar.n)

    return download_progress_hook


def download_youtube_dl_file(path, destination):
    with open(path, encoding=ENCODING) as file:
        content = file.read()

    options, urls = parse_youtube_dl_arguments(shlex.split(content, comments=True))

    # Only set destination if not already manually overridden by an absolute path. Relative paths, including empty
    # paths (only the output template), will be made absolute using the destination:
    #   1) '/absolute/path/to/file' -> '/absolute/path/to/file'
    #   2) '%(title)s-%(id)s.%(ext)s' -> 'destination/%(title)s-%(id)s.%(ext)s'
    #   3) 'relative/path/%(title)s-%(id)s.%(ext)s' -> 'destination/relative/path/%(title)s-%(id)s.%(ext)s'
    root, tail = os.path.split(options.get('outtmpl', youtube_dl.DEFAULT_OUTTMPL))
    if not os.path.isabs(root):
        options['outtmpl'] = os.path.join(destination, tail)

    options['progress_hooks'] = (make_download_progress_hook(),)
    with youtube_dl.YoutubeDL(options) as downloader:
        urls = tqdm.tqdm(urls, desc='Extracting information...', dynamic_ncols=True)
        urls_error_logger = ErrorLogger(urls.write)
        # For each playlist/video URL
        for url in urls:
            downloader.params['logger'] = urls_error_logger

            # Extract information for single video or playlist
            info = downloader.extract_info(url, download=False)
            urls.set_description(info['title'])
            urls.refresh()

            # Process extracted information (skipping already downloaded files and instructions in options that modify
            # the list of files to download) and download every entry
            entries = tqdm.tqdm(downloader.process_ie_result(info, download=False)['entries'], dynamic_ncols=True)
            entries_error_logger = ErrorLogger(entries.write)
            downloader.params['logger'] = entries_error_logger
            for entry in entries:
                entries.set_description(entry['title'])
                entries.refresh()
                downloader.process_ie_result(entry)


def main():
    paths = find_paths(arguments.path, find_youtube_dl_files_predicate, not arguments.dont_recurse)
    if not paths:
        return

    path_prefix = os.path.expanduser(arguments.path)
    progress_bar = tqdm.tqdm(paths, dynamic_ncols=True)
    for path in progress_bar:
        progress_bar.set_description(path[len(path_prefix):])
        progress_bar.refresh()
        download_youtube_dl_file(path, os.path.dirname(path))


if __name__ == '__main__':
    main()
